# Generated by Django 4.2.16 on 2025-10-06 23:29

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="CategoryModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the category",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "user_id",
                    models.UUIDField(help_text="ID of the user who owns this category"),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the category", max_length=100),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the category was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When the category was last updated"
                    ),
                ),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
                "db_table": "expense_management_categories",
                "ordering": ["name", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="OutboxEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        help_text="Auto-incrementing event identifier",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        help_text="Type of the domain event", max_length=255
                    ),
                ),
                (
                    "aggregate_id",
                    models.UUIDField(
                        blank=True,
                        help_text="ID of the aggregate that generated the event",
                        null=True,
                    ),
                ),
                ("payload", models.JSONField(help_text="Event data as JSON")),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the event was created",
                    ),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the event was successfully processed",
                        null=True,
                    ),
                ),
                (
                    "attempts",
                    models.IntegerField(
                        default=0, help_text="Number of processing attempts"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message from last failed attempt",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Outbox Event",
                "verbose_name_plural": "Outbox Events",
                "db_table": "expense_management_outbox_events",
                "ordering": ["created_at", "id"],
                "indexes": [
                    models.Index(fields=["created_at"], name="em_outbox_created_idx"),
                    models.Index(
                        fields=["processed_at"], name="em_outbox_processed_idx"
                    ),
                    models.Index(fields=["event_type"], name="em_outbox_type_idx"),
                    models.Index(
                        fields=["aggregate_id"], name="em_outbox_aggregate_idx"
                    ),
                    models.Index(fields=["attempts"], name="em_outbox_attempts_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="ExpenseModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the expense",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "user_id",
                    models.UUIDField(help_text="ID of the user who owns this expense"),
                ),
                (
                    "category_id",
                    models.UUIDField(help_text="ID of the category for this expense"),
                ),
                (
                    "amount_tzs",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Expense amount in Tanzanian Shillings (TZS)",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the expense",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "expense_date",
                    models.DateField(help_text="Date when the expense occurred"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the expense record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the expense record was last updated",
                    ),
                ),
            ],
            options={
                "verbose_name": "Expense",
                "verbose_name_plural": "Expenses",
                "db_table": "expense_management_expenses",
                "ordering": ["-expense_date", "-created_at"],
                "indexes": [
                    models.Index(fields=["user_id"], name="em_exp_user_idx"),
                    models.Index(fields=["category_id"], name="em_exp_category_idx"),
                    models.Index(fields=["expense_date"], name="em_exp_date_idx"),
                    models.Index(
                        fields=["user_id", "expense_date"], name="em_exp_user_date_idx"
                    ),
                    models.Index(
                        fields=["user_id", "category_id"], name="em_exp_user_cat_idx"
                    ),
                    models.Index(fields=["created_at"], name="em_exp_created_idx"),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="expensemodel",
            constraint=models.CheckConstraint(
                check=models.Q(("amount_tzs__gte", 0)),
                name="em_exp_amount_non_negative",
            ),
        ),
        migrations.AddIndex(
            model_name="categorymodel",
            index=models.Index(fields=["user_id"], name="em_cat_user_idx"),
        ),
        migrations.AddIndex(
            model_name="categorymodel",
            index=models.Index(fields=["name"], name="em_cat_name_idx"),
        ),
        migrations.AddIndex(
            model_name="categorymodel",
            index=models.Index(fields=["created_at"], name="em_cat_created_idx"),
        ),
        migrations.AddConstraint(
            model_name="categorymodel",
            constraint=models.UniqueConstraint(
                fields=("user_id", "name"), name="em_cat_user_name_unique"
            ),
        ),
    ]
